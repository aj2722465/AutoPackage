import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

ext {
    BASE = "legu/"
    JAR = rootDir.getPath() + "/legu/ms-shield.jar"
    SIGN_JAR = rootDir.getPath() + "/legu/apksigner.jar"
    WALLE_JAR = rootDir.getPath() + "/legu/walle-cli-all.jar"

    NAME = "AKIDPbV8qmDuaMSHpEh*************"//腾讯乐固AppId
    PASSWORD = "g5HH1VfX9XeXwCFG0n*************"//腾讯乐固AppKey
    KEY_PATH ="${KEY_PATH}" //密钥路径
    KEY_PASSWORD = "${KEY_PASS}" //密钥密码
    ALIAS = "${ALIAS_NAME}" //密钥别名
    ALIAS_PASSWORD =  "${ALIAS_PASS}"//别名密码
    OUTPUT_PATH = buildDir.getPath() + "/outputs/release/" //加固后所有apk的保存路径
    //加固包名称
    reinforce_apk_name =buildDir.getPath()+'/outputs/release/ETCloud/signer/ETCloud.apk'
    //渠道Apk输出路径
    channel_apks_path =buildDir.getPath() +'/outputs/release/channels/'
    //保存渠道配置
    CHANNEL_CONFIG =rootDir.getPath()+ "/app/channel/"
}

class ApkFile {
    String channel
    File file
}

/**
 * 查找所有apk
 * @param buildType release 或者 debug
 * @return ArrayList <ApkFile>
 */
def findApkFiles(String buildType) {
    println "findApkFiles buildType: " + buildType

    File apkDir = new File(buildDir.getPath() + "/outputs/apk")
    File[] channelDirs = apkDir.listFiles()
    println apkDir.getAbsolutePath()
    List<ApkFile> apkFiles = new ArrayList<>()
    for (int i = 0; i < channelDirs.length; i++) {
        File channelDir = channelDirs[i]
        ApkFile apkFile = new ApkFile()
        apkFile.channel = channelDir.name

        File[] files = new File(channelDir, "/" + buildType).listFiles()

        if (files == null || files.length == 0) {
            continue
        }
        for (int j = 0; j < files.length; j++) {
            File lastFile = files[j]
            if (!lastFile.name.endsWith(".apk")) {
                continue
            }

            apkFile.file = lastFile
            apkFiles.add(apkFile)
        }

    }

    return apkFiles
}


def zipalignApk(File output) {
    println "*************** zipalign optimize start ***************"
    File[] files = output.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    File zipalign = new File(output.getParent() + "/zipalign")
    if (zipalign.exists()) {
        if (!zipalign.delete()) {
            throw new RuntimeException("delete zipalignOutputDir failure!")
        }
    }

    if (!zipalign.mkdirs()) {
        throw new RuntimeException("make zipalignOutputDir failure!")
    }

    for (int i = 0; i < files.length; i++) {
        File leguApk = files[i]

        if (!leguApk.name.endsWith(".apk")) {
            continue
        }
        println leguApk.getAbsolutePath()
        exec {
            if (isWindows()) {
                commandLine "powershell", rootDir.getPath() + "/legu/zipalign", "-v", "-p", "4", leguApk.getPath(), zipalign.getPath() + "/" + leguApk.getName()
            } else {
                //替换zipalign路径： find ~/Library/Android/sdk/build-tools -name "zipalign"
                commandLine "${android.sdkDirectory}/build-tools/28.0.3/zipalign", "-v", "-p", "4", leguApk.getPath(), zipalign.getPath() + "/" + leguApk.getName()
         }

        }
        println "*************** zipalign optimize  finish***************"

    }
}

/**
 * 查找所有apk
 * @param output
 */
def signApk(File output) {
    println "*************** start sign ***************"

    File[] files = output.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    File signer = new File(output.getParent() + "/signer")

    if (signer.exists()) {
        if (!signer.delete()) {
            throw new RuntimeException("delete signerOutputDir failure!")
        }
    }

    if (!signer.mkdirs()) {
        throw new RuntimeException("make signerOutputDir failure!")
    }
    for (int i = 0; i < files.length; i++) {
        File zApk = files[i]

        if (!zApk.name.endsWith(".apk")) {
            continue
        }
        println zApk.getAbsolutePath()

        exec {
            if (isWindows()) {
                commandLine "powershell", "java", "-jar", SIGN_JAR, "sign", "--ks", KEY_PATH, "--ks-key-alias", ALIAS, "--ks-pass", "pass:" + KEY_PASSWORD, "--key-pass", "pass:" + KEY_PASSWORD, "--out", signer.getPath() + "/" + zApk.getName(), zApk.getPath()

            } else {
                commandLine "java", "-jar", SIGN_JAR, "sign", "--ks", KEY_PATH, "--ks-key-alias", ALIAS, "--ks-pass", "pass:" + KEY_PASSWORD, "--key-pass", "pass:" + KEY_PASSWORD, "--out", signer.getPath() + "/" + zApk.getName(), zApk.getPath()
            }
        }
        println "*************** finish sign--> ${zApk.getAbsolutePath()}***************"
    }

}


def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}
/**
 * 乐固加固
 * @param apk 加固的原始apk File
 * @param outputPath 输出目录
 * @param channel 原始渠道(baidu,yyb,...)
 */
def reinforce(apk, outputPath, channel) {

    println "reinforce apk:" + apk
    println "reinforce apk:" + channel

    //jiagu.db中缓存了多渠道信息，如果不删除会合并到当前多渠道配置
    def shield = new File(JAR)
    if (!shield.exists()) {
        throw new RuntimeException("jar not exists!")
    }
    println NAME
    println PASSWORD
    exec {
        if (isWindows()) {
            commandLine "powershell", "java -jar", JAR, "-sid", NAME, "-skey", PASSWORD, "-uploadPath", apk, "-downloadPath", outputPath
        } else {
            commandLine "java", "-Dfile.encoding=utf-8", "-jar", shield.getAbsolutePath(), "-sid", NAME, "-skey", PASSWORD, "-uploadPath", apk, "-downloadPath", outputPath
        }
    }
}

/**
 * 修改所有apk文件名
 * @param outputDir apk保存目录
 */
def renameApk(File outputDir) {
    println "*************** rename apk ***************"

    File[] files = outputDir.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    println outputDir.getAbsolutePath()
    for (int i = 0; i < files.length; i++) {
        File file = files[i]
        String fileName = file.getName()

        String[] prefixArr = fileName.split("-")
        String[] suffixArr = fileName.split("_")

        String rename = prefixArr[0] + "-" + prefixArr[1] +
                 "-" + suffixArr[suffixArr.length - 2] + ".apk"
        file.renameTo(file.getParent() + "/" + rename)

        reinforce_apk_name =file.getParent() + "/" + rename
        println "*************** rename apk  finish -->   "  + "${reinforce_apk_name}"
    }

    return files[0]
}

/**
 * zip压缩apk保存目录，生成 build/outputs/phjt-channels.zip
 * @param outputDir apk保存目录
 */
def compressDir(File outputDir) {
    println "*************** start compress apk output dir ***************"

    File zipFile = new File(outputDir.getParentFile().getParentFile().getParent() + "/" +"phjt-channels.zip")
    if (zipFile.exists()) {
        zipFile.delete()
    }

    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))
    File[] files = outputDir.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    for (int i = 0; i < files.length; i++) {
        File file = files[i]

        byte[] bf = new byte[8192]
        FileInputStream fis = new FileInputStream(file)
        zos.putNextEntry(new ZipEntry(file.getName()))

        int len
        while ((len = fis.read(bf)) > 0) {
            zos.write(bf, 0, len)
        }
        zos.flush()
        fis.close()
    }

    zos.close()
    println "*************** finish compress apk output dir   ***************"
    return zipFile.getAbsolutePath()
}

/**
 * 打多渠道包
 */
def buildChannelApks() {
    println "*************** start inject channels ***************"
    println(reinforce_apk_name)
    File reinforceApk = new File(reinforce_apk_name)
    if (!reinforceApk.exists()) {
        throw new RuntimeException("reinforce apk inexistence!")
    }
    //新建渠道包目录
    File channelsPath = new File(channel_apks_path)
    if (!channelsPath.exists()) {
        channelsPath.mkdir()
    }
    exec {
        if (isWindows()) {
            commandLine "powershell", "java -jar", WALLE_JAR + " batch -f ", CHANNEL_CONFIG, reinforce_apk_name, channel_apks_path
        } else {
            //commandLine "sh", "-c", "java -jar {walle-cli-all.jar文件路径} batch -f {渠道文件路径} {要加渠道的apk文件路径} {渠道包的输出路径}"
            commandLine "sh", "-c", "java -jar ${WALLE_JAR} batch -f ${CHANNEL_CONFIG} ${reinforce_apk_name} ${channel_apks_path}"
        }
    }
    println('finish inject channels --> ' + channelsPath.getAbsolutePath())
    println('then end!')
    println('*************** Consult Anjun when encountering problems *************** ')
}
task buildChannel{
    doLast {
        buildChannelApks()
    }
}

//构建发布到生产环境的所有渠道apk,生成压缩文件 phjt-channels.zip
task assemblePackageChannel {
    println('*************** Consult Anjun when encountering problems *************** ')
    dependsOn("assembleProductRelease")

    doLast {
        List<ApkFile> apkFiles = findApkFiles("release")
        if (apkFiles.size() == 0) {
            throw new RuntimeException("no apk files has found!")
        }

        String[] nameSlice = apkFiles.get(0).file.name.split("-")
        File outputDir = new File(OUTPUT_PATH + nameSlice[0] + "/legu")

        println outputDir.getPath()
        if (outputDir.exists()) {
            if (!outputDir.delete()) {
                throw new RuntimeException("delete outputDir failure!")
            }
        }

        if (!outputDir.mkdirs()) {
            throw new RuntimeException("make outputDir failure!")
        }
        println "*************** start legu reinforce ***************"
        for (int i = 0; i < apkFiles.size(); i++) {
            ApkFile apkFile = apkFiles.get(i)
            reinforce(apkFile.file.getAbsolutePath(), outputDir.getAbsolutePath(), apkFile.channel)
        }
        println "*************** finish legu reinforce ***************"

        zipalignApk(new File(outputDir.getAbsolutePath()))

        signApk(new File(outputDir.getParentFile().getAbsolutePath() + "/zipalign"))

        File defaultApk = renameApk(new File(outputDir.getParentFile().getAbsolutePath() + "/signer"))
        println(defaultApk)
        //完成加固，打多渠道包
        buildChannelApks()

        String fileName = compressDir(new File(channel_apks_path))

        println(fileName)
    }
}
